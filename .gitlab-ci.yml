# This is a simple example illustrating how to build and test .NET Core project
# with GitLab Continuous Integration / Continuous Delivery.

# ### Specify the Docker image
image: mcr.microsoft.com/dotnet/core/sdk:3.1

variables:
  CONFIGURATION: Release
  NUGET_PACKAGE_FOLDER: .nuget
  ARTIFACTORY_SOURCE: https://humanaedge.jfrog.io/humanaedge/api/nuget/v3/nuget-local

stages:
  - build
  - test
  - pack

####################
# BUILD
####################
build:
  stage: build
  script:
    - dotnet restore --no-cache
    - dotnet build -c ${CONFIGURATION} --no-restore


####################
# TEST
####################
test:
  stage: test
  variables:
    TEST_RESULTS_DIR: ${CI_PROJECT_DIR}/test-results
  script:
    - echo "env - $CI_ENVIRONMENT_URL"
    - echo "test_result-dir - $TEST_RESULTS_DIR"
    - mkdir -p $TEST_RESULTS_DIR
    - dotnet restore --no-cache
    - ./run-tests-with-coverage.sh
  artifacts:
    when: always
    paths:
      - ${TEST_RESULTS_DIR}
    reports:
      junit: ${TEST_RESULTS_DIR}/*test-result.xml
      cobertura: $TEST_RESULTS_DIR/coverage.cobertura.xml



####################
# PACK
####################
.pack-stage:
  before_script:
    - dotnet restore --no-cache
    - echo $(date +%Y%m%d%H%M%S)
    - export PACKAGE_VERSION=$(date -u +%Y%m%d%H%M%S)

.dotnet-pack: &dotnet-pack
  - dotnet pack /p:Channel=${CHANNEL} /p:BuildTimestamp=${PACKAGE_VERSION} -c ${CONFIGURATION} -o ${NUGET_PACKAGE_FOLDER} --no-restore
  - cd $NUGET_PACKAGE_FOLDER
  - dotnet nuget push **/*.nupkg -s ${ARTIFACTORY_SOURCE} -k ${ARTIFACTORY_NUGET}

pack-master:
  stage: pack
  extends: .pack-stage
  script:
    - export CHANNEL=alpha
    - *dotnet-pack
  only:
    - master

pack-release:
  stage: pack
  extends: .pack-stage
  script:
    - export CHANNEL=rc
    - *dotnet-pack
  only:
    - /^release-.*$/

pack-production:
  stage: pack
  extends: .pack-stage
  script:
    - export CHANNEL=''
    - *dotnet-pack
  only:
    - production